cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

SET(EXECUTABLE_NAME "MonocularSLAM")

SET_PROPERTY(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

IF(USE_QT)
	set(CMAKE_INCLUDE_CURRENT_DIR ON) # Find includes in corresponding build directories
	set(CMAKE_AUTOMOC ON) # Instruct CMake to run moc automatically when needed.
ENDIF()
 
ADD_DEFINITIONS( -D_INCLUDE_INTERFACING_ )

FILE(GLOB LOCAL_HEADERS *.h*)
FILE(GLOB LOCAL_SOURCES *.cpp)

INCLUDE_DIRECTORIES(../../include)

foreach(SUBLIB_NAME ${SUBLIBRARY_NAMES})
	string(TOUPPER "${SUBLIB_NAME}" UPPERCASE_NAME)
	INCLUDE_DIRECTORIES(../../include/${SUBLIB_NAME})
	IF(USE_QT)
		INCLUDE_DIRECTORIES("${QT${UPPERCASE_NAME}_BUILD_PATH}")
		INCLUDE_DIRECTORIES("../../qt/${SUBLIB_NAME}")
	ENDIF()
endforeach(SUBLIB_NAME) 

IF(USE_QT)
	LIST(APPEND ADDITIONAL_LIBS Qt5::Widgets)
ENDIF()

LIST(APPEND ADDITIONAL_LIBS ${OpenCV_LIBRARIES})

MESSAGE(STATUS "OpenCV_LIBRARIES = ${OpenCV_LIBRARIES}")
MESSAGE(STATUS "Boost_LIBRARIES = ${Boost_LIBRARIES}")

LIST(APPEND ADDITIONAL_LIBS ${Boost_LIBRARIES})

LIST(APPEND ADDITIONAL_LIBS thermalvis)

foreach(SUBLIB_NAME ${SUBLIBRARY_NAMES})
	LIST(APPEND ADDITIONAL_LIBS thermalvis-${SUBLIB_NAME})
endforeach(SUBLIB_NAME) 

IF(USE_QT)
	foreach(SUBLIB_NAME ${SUBLIBRARY_NAMES})
		string(TOUPPER "${SUBLIB_NAME}" UPPERCASE_NAME)
		IF(NOT EXISTS "${QT${UPPERCASE_NAME}_BUILD_PATH}/ui_mainwindow_${SUBLIB_NAME}.h")
			MESSAGE(FATAL_ERROR "<ui_mainwindow_${SUBLIB_NAME}.h> could not be found in <${QT${UPPERCASE_NAME}_BUILD_PATH}>. Has Qt Creator been used to generate this file? Or, is the CMake variable incorrect?")
		ENDIF()
		LIST(APPEND QT_RELATED_FILES ../../qt/${SUBLIB_NAME}/mainwindow_${SUBLIB_NAME}.cpp)
		LIST(APPEND QT_RELATED_FILES ../../qt/${SUBLIB_NAME}/mainwindow_${SUBLIB_NAME}.h )
		LIST(APPEND QT_RELATED_FILES ${QT${UPPERCASE_NAME}_BUILD_PATH}/ui_mainwindow_${SUBLIB_NAME}.h)
	endforeach(SUBLIB_NAME) 
ENDIF()

add_executable(${EXECUTABLE_NAME} ${LOCAL_SOURCES} ${LOCAL_HEADERS} ${QT_RELATED_FILES})
TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${ADDITIONAL_LIBS})

foreach(EXTERNAL_LIB ${EXTERNAL_LIBRARIES}) 
	string(TOUPPER ${EXTERNAL_LIB} UPPERCASE_NAME)
	IF(USE_${UPPERCASE_NAME} AND ${EXTERNAL_LIB}_FOUND)
		SET(LINKING_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/link/${EXTERNAL_LIB}.cmake")
		IF(EXISTS "${LINKING_FILE}")
			include(${LINKING_FILE})
		ENDIF()
	ENDIF()
endforeach(EXTERNAL_LIB)
