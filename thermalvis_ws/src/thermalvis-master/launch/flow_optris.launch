<launch>

	<group ns="optris">
		<node name="optris_imager_node" pkg="optris_drivers" type="optris_imager_node">
			<!-- Set configuration file of your camera here! -->
			<param name="xmlConfig"      type="string" value="$(find optris_drivers)/config/14040047.xml"/>  
		</node>
		
		<node name="optris_colorconvert_node" pkg="optris_drivers" type="optris_colorconvert_node">
			<param name="palette"        type="int"    value="6"/>     <!-- see ImageBuilder.h for valid values -->
			<param name="paletteScaling" type="int"    value="2"/>     <!-- scaling method for color conversion, see ImageBuilder.h -->
			<param name="temperatureMin" type="double" value="20"/>    <!-- set minimum temperature for fixed scaling -->
			<param name="temperatureMax" type="double" value="40"/>    <!-- set maximum temperature for fixed scaling -->
			<!-- Uncomment the following line, if you want to use PNG compression. Use rosrun dynamic_reconfigure reconfigure_gui to pick PNG format --> 
			<!-- <param name="image_transport" type="string" value="compressed"/> -->
		</node>
	</group>
	
	<node name="streamer_node" pkg="thermalvis" type="streamer" output="screen">
		<param name="source" value="topic" />
		<param name="topic" value="/optris/thermal_image" />
		<param name="syncMode" value="2" />
		<param name="alreadyCorrected" value="true" />
		<!-- <param name="intrinsics" value="$(find thermalvis)/data/calibration/csiro-aslab/optris.yml" /> -->
		
		<param name="desiredDegreesPerGraylevel" value="0.01" />
	
		<param name="filterMode" value="0" /> <!-- 0 for no filter, 1 for gaussian, 2 for bilateral, 3 for adaptive bilateral -->
		<param name="filterParam" value="2.0" />
		
		<param name="markDuplicates" value="true" />
		
		<!-- <param name="degreesPerGraylevel" value="0.025" /> --> <!-- value of 0.025 works OK for miricle sequences.. -->
		<!-- <param name="desiredDegreesPerGraylevel" value="0.05" /> --> <!-- can adjust this to enhance contrast -->
		
		<param name="normMode" value="3" />
		<param name="outputType" value="2" /> <!-- 0 for 8-bit grayscale, 1 for 8-bit color, 2 for 16-bit grayscale -->
		<param name="writeImages" value="false" />
		<param name="outputFolder" value="~\Documents\GitHub\thermalvis\media\output" />
		
		<param name="loopMode" value="true" />
		
		<param name="outputColor" value="true" />
		<param name="output8bit" value="true" />

	</node>
	
	<node name="flow_node" pkg="thermalvis" type="flow" output="screen">
		
		<param name="topic" value="/thermalvis/streamer_node/image_mono" />
		<param name="debugMode" value="true" />
		<param name="outputDebugImages" value="false" />
		<param name="outputTrackedFeatures" value="false" />
		<param name="outputDetectedFeatures" value="false" />
		<param name="showTrackHistory" value="false" />
		<param name="autoTrackManagement" value="true" />
		<!-- <param name="verboseMode" value="true" /> -->
		
		<param name="detectEveryFrame" value="false" />
		<param name="outputFolder" value="~\Documents\GitHub\thermalvis\media\sample_video\optris_data" />
		
		<param name="predetectedFeatures" value="~\Documents\GitHub\thermalvis\media\sample_video\optris_data\features" />
		<!-- <param name="detector_1" value="FILE" /> -->
		<!-- <param name="minFeatures" value="100" /> -->
		<param name="sensitivity_1" value="0.1" /> <!-- default is 0.1 -->
		<param name="flowThreshold" value="0.0002" /> <!-- default is 0.0002 -->
		
	</node>
	
	<node name="image_view" pkg="image_view" type="image_view" output="screen">
		<remap from="image" to="/thermalvis/streamer_node/image_col"/>
		<param name="~/autosize" value="true" />
	</node>
	
	<node name="image_view2" pkg="image_view" type="image_view" output="screen">
		<remap from="image" to="/thermalvis/flow_node/image_col"/>
		<param name="~/autosize" value="true" />
	</node>
	
	<!-- <node name="reconfigure_streamer" pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen" args="/streamer"/> -->
	<node name="reconfigure_flow" pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen" args="/flow_node"/>
	<!-- <node name="reconfigure_slam" pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen" args="/slam"/> -->
	
</launch>
